name: Elixir CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  MIX_ENV: test

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-elixir@v1.5
        with:
          experimental-otp: true
          elixir-version: '1.11' # Define the elixir version [required]
          otp-version: '22.2.8' # Define the OTP version [required]

      - name: Check for deps cache
        uses: actions/cache@v2
        id: deps-cache
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Install Mix Dependencies
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: mix deps.get

      - name: Compile app
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix do compile

      # - name: Upload build artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: build-artifact
      #     path: _build

  format:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-elixir@v1.5
        with:
          experimental-otp: true
          elixir-version: '1.11'
          otp-version: '22.2.8'

      - name: Check for deps cache
        uses: actions/cache@v2
        id: deps-cache
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Install Mix Dependencies
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: mix deps.get

      # - name: Download build artifacts
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: build-artifact
      #     path: _build

      - name: Check Formatting
        run: mix format --check-formatted

  # credo:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Run Credo
  #       run: mix credo --strict

  # test:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   services:
  #     # Label used to access the service container
  #     postgres:
  #       # Docker Hub image
  #       image: postgis/postgis:10-2.5-alpine
  #       # Provide the password for postgres
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: postgres
  #       # Set health checks to wait until postgres has started
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         # Maps tcp port 5432 on service container to the host
  #         - 5432:5432

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Run tests
  #       env:
  #         POSTGRES_PORT: 5432
  #       run: mix test

  # dialyzer:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Check for PLT Cache
  #       uses: actions/cache@v2
  #       id: plt-cache
  #       with:
  #         path: priv/plts
  #         key: ${{ runner.os }}-plts-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
  #         restore-keys: ${{ runner.os }}-plts

  #     - name: Create PLTs
  #       if: steps.plt-cache.outputs.cache-hit != 'true'
  #       run: |
  #         mkdir -p priv/plts
  #         mix dialyzer --plt

  #     - name: Run dialyzer
  #       run: mix dialyzer --no-check
